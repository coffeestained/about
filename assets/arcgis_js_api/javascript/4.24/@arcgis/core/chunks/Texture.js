/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{h as t}from"../core/lang.js";import{S as e}from"./mathUtils.js";import{i as r,u as i}from"./maybe.js";import a from"../core/Error.js";import{L as s}from"./Logger.js";import{C as o}from"./context-util.js";import{R as n,T as h,c as p,f as l,j as _,b as m,a as c,k as d}from"./enums.js";const u=s.getLogger("esri/views/webgl"),E=!!t("enable-feature:webgl-debug");function T(){return E}function g(){return E}function x(t){if(T()){const e=t.getError();if(e){const r=function(t,e){switch(e){case t.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case t.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case t.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case t.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case t.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case t.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}(t,e),i=(new Error).stack;u.error(new a("webgl-error","WebGL error occured",{message:r,stack:i}))}}}function M(t){return window.WebGL2RenderingContext&&t instanceof window.WebGL2RenderingContext}class A{constructor(t,e,r=null){if(this._context=t,this.type="texture",this._glName=null,this._descriptor=void 0,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,t.instanceCounter.increment(n.Texture,this),this._descriptor={target:h.TEXTURE_2D,samplingMode:p.LINEAR,wrapMode:l.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1,...e},t.type!==o.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),w(this._descriptor.target)))throw new Error("3D and array textures are not supported in WebGL1");this._descriptor.target===h.TEXTURE_CUBE_MAP?this._setDataCubeMap(r):this.setData(r)}get glName(){return this._glName}get descriptor(){return this._descriptor}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._context.gl&&this._glName&&(this._context.unbindTexture(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(n.Texture,this))}release(){this.dispose()}resize(t,e){const r=this._descriptor;if(r.width!==t||r.height!==e){if(this._wasImmutablyAllocated)throw new Error("Immutable textures can't be resized!");r.width=t,r.height=e,this._descriptor.target===h.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(t=null){for(let e=h.TEXTURE_CUBE_MAP_POSITIVE_X;e<=h.TEXTURE_CUBE_MAP_NEGATIVE_Z;e++)this._setData(t,e)}setData(t){this._setData(t)}_setData(t,e){if(!this._context||!this._context.gl)return;const i=this._context.gl;this._glName||(this._glName=i.createTexture()),void 0===t&&(t=null);const a=this._descriptor;e??(e=a.target);const s=w(e);null===t&&(a.width=a.width||4,a.height=a.height||4,s&&(a.depth=a.depth??1));const o=this._context.bindTexture(this,A.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(A.TEXTURE_UNIT_FOR_UPDATES),A._validateTexture(this._context,a),this._configurePixelStorage();const n=a.pixelFormat;let h=a.internalFormat?a.internalFormat:this._deriveInternalFormat(n,a.dataType);if(f(t)){let r=t.width,o=t.height;const n=1;t instanceof HTMLVideoElement&&(r=t.videoWidth,o=t.videoHeight),a.width&&a.height,s&&a.depth,a.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(e,h,a.hasMipmap,r,o,n),this._texImage(e,0,h,r,o,n,t),x(i),a.hasMipmap&&this.generateMipmap(),void 0===a.width&&(a.width=r),void 0===a.height&&(a.height=o),s&&void 0===a.depth&&(a.depth=n)}else{const{width:o,height:n,depth:p}=a;if(null!=o&&null!=n||console.error("Width and height must be specified!"),s&&null==p&&console.error("Depth must be specified!"),a.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(e,h,a.hasMipmap,o,n,p),i.DEPTH24_STENCIL8&&h===i.DEPTH_STENCIL&&(h=i.DEPTH24_STENCIL8),I(t)){const r=t.levels,s=R(e,o,n,p),l=Math.min(s-1,r.length-1);M(i)?i.texParameteri(a.target,i.TEXTURE_MAX_LEVEL,l):a.hasMipmap=a.hasMipmap&&s===r.length;const m=h;if(!(m in _))throw new Error("Attempting to use compressed data with an umcompressed format!");this._forEachMipmapLevel(((t,i,a,s)=>{const o=r[Math.min(t,r.length-1)];this._compressedTexImage(e,t,m,i,a,s,o)}),l)}else r(t)?(this._texImage(e,0,h,o,n,p,t),x(i),a.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel(((t,r,a,s)=>{this._texImage(e,t,h,r,a,s,null),x(i)}))}A._applySamplingMode(i,this._descriptor),A._applyWrapMode(i,this._descriptor),A._applyAnisotropicFilteringParameters(this._context,this._descriptor),x(i),this._context.bindTexture(o,A.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,e,r,i,a,s){s||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const o=this._context.gl,n=this._descriptor,{pixelFormat:h,internalFormat:p,dataType:l,isImmutable:_,target:m}=n;if(_&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");const c=this._context.bindTexture(this,A.TEXTURE_UNIT_FOR_UPDATES);(e<0||r<0||i>n.width||a>n.height||e+i>n.width||r+a>n.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),f(s)?o.texSubImage2D(m,t,e,r,h,l,s):I(s)?o.compressedTexSubImage2D(m,t,e,r,i,a,p,s.levels[t]):o.texSubImage2D(m,t,e,r,i,a,h,l,s),this._context.bindTexture(c,A.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,e,r,i,a,s,o,n){n||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const h=this._context.gl;if(!M(h))throw new Error("3D textures are not supported in WebGL1");const p=this._descriptor,{pixelFormat:l,dataType:_,isImmutable:m,target:c,internalFormat:d}=p;if(m&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");w(c)||console.warn("Attempting to set 3D texture data on a non-3D texture");const u=this._context.bindTexture(this,A.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(A.TEXTURE_UNIT_FOR_UPDATES),(e<0||r<0||i<0||a>p.width||s>p.height||o>p.depth||e+a>p.width||r+s>p.height||i+o>p.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),I(n))n=n.levels[t],h.compressedTexSubImage3D(c,t,e,r,i,a,s,o,d,n);else{const p=n;h.texSubImage3D(c,t,e,r,i,a,s,o,l,_,p)}this._context.bindTexture(u,A.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new Error("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,A._validateTexture(this._context,t)}t.samplingMode===p.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=p.LINEAR_MIPMAP_NEAREST):t.samplingMode===p.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=p.NEAREST_MIPMAP_NEAREST);const e=this._context.bindTexture(this,A.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(A.TEXTURE_UNIT_FOR_UPDATES),this._context.gl.generateMipmap(t.target),this._context.bindTexture(e,A.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,A._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const t=this._context.gl,e=this._descriptor;this._samplingModeDirty&&(A._applySamplingMode(t,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(A._applyWrapMode(t,e),this._wrapModeDirty=!1)}_deriveInternalFormat(t,e){if(this._context.type===o.WEBGL1)return t;switch(e){case m.FLOAT:switch(t){case c.RGBA:return d.RGBA32F;case c.RGB:return d.RGB32F;default:throw new Error("Unable to derive format")}case m.UNSIGNED_BYTE:switch(t){case c.RGBA:return d.RGBA8;case c.RGB:return d.RGB8}default:return t}}_configurePixelStorage(){const t=this._context.gl,{unpackAlignment:e,flipped:r,preMultiplyAlpha:i}=this._descriptor;t.pixelStorei(t.UNPACK_ALIGNMENT,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,r?1:0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_texStorage(t,e,r,i,a,s){const o=this._context.gl;if(!M(o))throw new Error("Immutable textures are not supported in WebGL1");if(!(e in d))throw new Error("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const n=r?R(t,i,a,s):1;w(t)?o.texStorage3D(t,n,e,i,a,s):o.texStorage2D(t,n,e,i,a),this._wasImmutablyAllocated=!0}_texImage(t,e,a,s,n,h,p){const l=this._context.gl;let _=null;const m=this._context.type===o.WEBGL2,c=w(t),{isImmutable:d,pixelFormat:u,dataType:E}=this._descriptor;if(m&&(_=l),m||!f(p))if(d){if(r(p)){const r=p;c?_.texSubImage3D(t,e,0,0,0,s,n,h,u,E,r):l.texSubImage2D(t,e,0,0,s,n,u,E,r)}}else{const r=i(p);c?_.texImage3D(t,e,a,s,n,h,0,u,E,r):l.texImage2D(t,e,a,s,n,0,u,E,r)}else l.texImage2D(t,0,a,u,E,p)}_compressedTexImage(t,e,i,a,s,n,h){const p=this._context.gl;let l=null;const _=w(t),m=this._descriptor.isImmutable;if(_){if(this._context.type!==o.WEBGL2)throw new Error("3D textures are not supported in WebGL1");l=p}m?r(h)&&(_?l.compressedTexSubImage3D(t,e,0,0,0,a,s,n,i,h):p.compressedTexSubImage2D(t,e,0,0,a,s,i,h)):_?l.compressedTexImage3D(t,e,i,a,s,n,0,h):p.compressedTexImage2D(t,e,i,a,s,0,h)}_forEachMipmapLevel(t,e=1/0){let{width:r,height:i,depth:a,hasMipmap:s,target:o}=this._descriptor;const n=o===h.TEXTURE_3D;for(let o=0;t(o,r,i,a),s&&(1!==r||1!==i||n&&1!==a)&&!(o>=e);++o)r=Math.max(1,r>>1),i=Math.max(1,i>>1),n&&(a=Math.max(1,a>>1))}static _validateTexture(t,r){(r.width<0||r.height<0||r.depth<0)&&console.error("Negative dimension parameters are not allowed!");const i=M(t.gl),a=e(r.width)&&e(r.height);i||!r.isImmutable&&!w(r.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),i||a||("number"==typeof r.wrapMode?r.wrapMode!==l.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):r.wrapMode.s===l.CLAMP_TO_EDGE&&r.wrapMode.t===l.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),r.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))}static _applySamplingMode(t,e){let r=e.samplingMode,i=e.samplingMode;r===p.LINEAR_MIPMAP_NEAREST||r===p.LINEAR_MIPMAP_LINEAR?(r=p.LINEAR,e.hasMipmap||(i=p.LINEAR)):r!==p.NEAREST_MIPMAP_NEAREST&&r!==p.NEAREST_MIPMAP_LINEAR||(r=p.NEAREST,e.hasMipmap||(i=p.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,r),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,i)}static _applyWrapMode(t,e){"number"==typeof e.wrapMode?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}static _applyAnisotropicFilteringParameters(t,e){const r=t.capabilities.textureFilterAnisotropic;r&&t.gl.texParameterf(e.target,r.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}}function I(t){return r(t)&&"type"in t&&"compressed"===t.type}function f(t){return r(t)&&!I(t)&&!function(t){return r(t)&&"byteLength"in t}(t)}function w(t){return t===h.TEXTURE_3D||t===h.TEXTURE_2D_ARRAY}function R(t,e,r,i=1){let a=Math.max(e,r);return t===h.TEXTURE_3D&&(a=Math.max(a,i)),Math.round(Math.log(a)/Math.LN2)+1}A.TEXTURE_UNIT_FOR_UPDATES=0;export{A as T,g as a,x as c,M as i,T as w};
