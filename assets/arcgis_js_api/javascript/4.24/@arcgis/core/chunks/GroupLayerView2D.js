/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import"./Logger.js";import"./ensureType.js";import"../core/lang.js";import"../core/accessorSupport/decorators/property.js";import{subclass as t}from"../core/accessorSupport/decorators/subclass.js";import{W as r}from"./WGLContainer.js";import{c as o}from"./enums.js";import{L as s}from"./LayerView2D.js";import i from"./GroupLayerView.js";import"../config.js";import"./object.js";import"./maybe.js";import"./string.js";import"./get.js";import"./utils.js";import"./handleUtils.js";import"./metadata.js";import"../core/Error.js";import"./tracking.js";import"./mat3f32.js";import"./brushes.js";import"./mat3.js";import"./common.js";import"./vec2f32.js";import"./pixelUtils.js";import"../layers/support/PixelBlock.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"./ArrayPool.js";import"./watch.js";import"../core/scheduling.js";import"./nextTick.js";import"../core/promiseUtils.js";import"../core/accessorSupport/decorators/cast.js";import"./DisplayObject.js";import"../core/Evented.js";import"./DefaultVertexAttributeLayouts.js";import"./vec2f64.js";import"./context-util.js";import"./FramebufferObject.js";import"./VertexArrayObject.js";import"./Texture.js";import"./mathUtils.js";import"./VertexElementDescriptor.js";import"./definitions.js";import"./vec4f32.js";import"./Utils16.js";import"./number3.js";import"./enums2.js";import"./enums4.js";import"./ProgramTemplate.js";import"./Program.js";import"./MaterialKey.js";import"./alignmentUtils.js";import"./utils17.js";import"./screenUtils.js";import"./heatmapUtils.js";import"./vec4f64.js";import"../Color.js";import"./colorUtils.js";import"./StyleDefinition.js";import"./config.js";import"./GeometryUtils2.js";import"./Container.js";import"./EffectView.js";import"./parser2.js";import"./mat4f32.js";import"./mat4.js";import"./_commonjsHelpers.js";import"../core/reactiveUtils.js";import"./earcut.js";import"./vec2.js";import"./featureConversionUtils.js";import"../geometry/support/jsonUtils.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"./reader.js";import"../geometry/SpatialReference.js";import"./writer.js";import"../geometry/Point.js";import"../geometry/support/webMercatorUtils.js";import"./Ellipsoid.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./extentUtils.js";import"../geometry/Polyline.js";import"./OptimizedGeometry.js";import"./OptimizedFeatureSet.js";import"../core/Collection.js";import"./shared.js";import"./SimpleObservable.js";import"./collectionUtils.js";import"./ClipRect.js";import"../geometry.js";import"./typeUtils.js";import"./jsonMap.js";import"../views/layers/LayerView.js";import"../core/HandleOwner.js";import"../core/Handles.js";import"./Identifiable.js";import"../core/Promise.js";class p extends r{constructor(){super(...arguments),this.requiresDedicatedFBO=!1}dispose(){}doRender(e){const t=this.createRenderParams(e),{context:r,painter:s,profiler:i}=t;this._prevFBO=r.getBoundFramebufferObject(),i.recordContainerStart(this.name);const p=this._getFbo(t),m=s.getRenderTarget();r.bindFramebuffer(p),s.setRenderTarget(p),r.setDepthWriteEnabled(!0),r.setColorMask(!0,!0,!0,!0),r.setClearColor(0,0,0,0),r.setClearDepth(1),r.clear(r.gl.COLOR_BUFFER_BIT|r.gl.DEPTH_BUFFER_BIT),r.setDepthWriteEnabled(!1);for(const t of this.children)t.beforeRender(e);for(const e of this.children)e.processRender(t);for(const t of this.children)t.afterRender(e);s.setRenderTarget(m),s.releaseFbo(p),r.bindFramebuffer(this._prevFBO),s.beforeRenderLayer(t,this._clippingInfos?255:0,this.computedOpacity),r.setStencilTestEnabled(!1),r.setStencilWriteMask(0),s.blitTexture(r,p.colorTexture,o.NEAREST),s.compositeLayer(t,this.computedOpacity),i.recordContainerEnd()}createRenderParams(e){return{...super.createRenderParams(e),blendMode:this.blendMode,effects:this.computedEffects,globalOpacity:1}}_getFbo(e){const{context:t,painter:r}=e,{width:o,height:s}=t.getViewport();return r.acquireFbo(o,s)}}let m=class extends(s(i)){constructor(){super(...arguments),this.container=new p}attach(){this._updateStageChildren(),this.handles.add(this.layerViews.on("after-changes",(()=>this._updateStageChildren())),"grouplayerview2d")}detach(){this.handles.remove("grouplayerview2d"),this.container.removeAllChildren()}update(e){}moveStart(){}viewChange(){}moveEnd(){}_updateStageChildren(){this.container.removeAllChildren(),this.layerViews.forEach(((e,t)=>this.container.addChildAt(e.container,t)))}};m=e([t("esri.views.2d.layers.GroupLayerView2D")],m);const a=m;export{a as default};
