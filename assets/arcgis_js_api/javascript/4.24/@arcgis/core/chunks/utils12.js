/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{m as e}from"../core/lang.js";import{f as n}from"./messages.js";import{substitute as t}from"../intl.js";import{numericTypes as i}from"../layers/support/fieldUtils.js";import"../popup/content/AttachmentsContent.js";import"../popup/content/Content.js";import"../popup/content/CustomContent.js";import"../popup/content/ExpressionContent.js";import s from"../popup/content/FieldsContent.js";import"../popup/content/MediaContent.js";import o from"../popup/content/TextContent.js";import a from"../popup/ExpressionInfo.js";import r from"../popup/FieldInfo.js";import{g as l}from"./utils13.js";import{viewScaleRE as p}from"./visualVariableUtils.js";let m=0;const f="expression/";function u(e){return"hasVisualVariables"in e&&e.hasVisualVariables()?e.visualVariables.filter((e=>!(p.test(e.valueExpression)||"target"in e&&"outline"===e.target))):[]}function d(e,n){let t=null;"popupTemplate"in e&&e.popupTemplate&&(t=e.popupTemplate.fieldInfos);const s=e.getField(n);let o=null;if(t&&t.some((e=>!(!e||e.fieldName.toLowerCase()!==s.name.toLowerCase()||(o=e.clone(),0)))),!o){const e=i.includes(s.type),n="integer"===s.type||"small-integer"===s.type;o=new r({fieldName:s.name,isEditable:s.editable,visible:!0,format:e?{places:n?0:2,digitSeparator:!0}:null})}return o.label||(o.label=s.alias),o}function c(e){const{expression:n,title:t,returnType:i}=e;return new a({name:"expr"+m++,expression:n,title:t,returnType:i})}function x(e){const n="number"===e.returnType?{places:2,digitSeparator:!0}:null;return new r({fieldName:`expression/${e.name}`,visible:!0,format:n})}async function g(i){const s=await n("esri/smartMapping/t9n/smartMapping"),{renderer:o,layer:a,normFieldExpressionTemplate:r}=i,p=[],m=[],f=l(o,u);for(const e of f)if("field"===e.type)p.push(d(a,e.field));else if("normalized-field"===e.type){const n=a.getField(e.field),i=a.getField(e.normalizationField),o=c({type:"expression",expression:`\n      $feature["${n.name}"];\n      $feature["${i.name}"];\n      ${"percentage"===r?`($feature["${n.name}"] / $feature["${i.name}"]) * 100;`:`$feature["${n.name}"] / $feature["${i.name}"];`}\n      `,title:t("percentage"===r?s.normFieldLabelAsPercent:s.normFieldLabel,{expression1:n.alias,expression2:i.alias}),returnType:"number"});p.push(x(o),d(a,e.field),d(a,e.normalizationField)),m.push(o)}else if("expression"===e.type){const n=c(e);p.push(x(n)),m.push(n)}return{fieldInfos:e(p,((e,n)=>e.fieldName===n.fieldName)),expressionInfos:e(m,((e,n)=>e.expression===n.expression))}}async function b(e,i){const{fieldInfos:a,expressionInfos:r}=i,l=await n("esri/smartMapping/t9n/smartMapping");if(a.length>2)return[new s({fieldInfos:a})];const p=[];for(const n of a){const i=n.fieldName;let s=n.label;if(!s){const n=e.getField(i);if(n)s=n.alias||i;else if(r){const e=i.split("expression/")[1],n=r[r.findIndex((n=>n.name===e))];n&&(s=n.title||n.name)}}p.push(new o({text:t(l.fieldInfo,{fieldLabel:s,fieldValue:`{${i}}`})}))}return p}function j(e){return!(!("normalizationField"in e)||!e.normalizationField)||"hasVisualVariables"in e&&e.hasVisualVariables()&&e.visualVariables.some((e=>!(!("normalizationField"in e)||!e.normalizationField)))}export{g as a,b,d as c,f as e,u as g,j as h};
