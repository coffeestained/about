/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import r from"../request.js";import t from"../core/Loadable.js";import{L as o}from"../chunks/Logger.js";import{i as s}from"../chunks/maybe.js";import{M as i}from"../chunks/MultiOriginJSONSupport.js";import{isAbortError as a}from"../core/promiseUtils.js";import{urlToObject as n}from"../core/urlUtils.js";import{property as l}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import"../chunks/ensureType.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import c from"../geometry/Extent.js";import u from"../geometry/SpatialReference.js";import{p as d}from"../chunks/arcgisLayerUrl.js";import"../config.js";import"../chunks/object.js";import"../kernel.js";import"../core/Error.js";import"../chunks/string.js";import"../core/Promise.js";import"../core/Accessor.js";import"../chunks/get.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../chunks/metadata.js";import"../chunks/ArrayPool.js";import"../chunks/tracking.js";import"../chunks/watch.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../core/JSONSupport.js";import"../geometry/Geometry.js";import"../chunks/reader.js";import"../chunks/writer.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"../chunks/Ellipsoid.js";import"../chunks/persistableUrlUtils.js";const m=o.getLogger("esri.networks.Network");let y=class extends(i(t)){constructor(e){super(e),this.id=null,this.title=null,this.layerUrl=null,this.dataElement=null,this.fullExtent=null,this.spatialReference=null,this.type=null,this.sourceJSON=null}initialize(){this.when().catch((e=>{a(e)||m.error("#load()",`Failed to load layer (title: '${this.title??"no title"}', id: '${this.id??"no id"}')`,{error:e})}))}get datasetName(){return this.dataElement?.name}get owner(){return this.dataElement?.userIdentity}get schemaGeneration(){return this.dataElement?.schemaGeneration}get parsedUrl(){const e=this.layerUrl;return e?n(e):null}get featureServiceUrl(){const e=this.parsedUrl&&d(this.parsedUrl.path);return s(e)?e.url.path:null}get networkServiceUrl(){return this.featureServiceUrl?this.featureServiceUrl.replace(/\/FeatureServer/i,"/UtilityNetworkServer"):null}get layerId(){const e=this.parsedUrl&&d(this.parsedUrl.path);return s(e)?e.sublayer:null}async load(e){return this.addResolvingPromise(this._fetchDataElement(this.featureServiceUrl,this.layerId.toString(),e)),this.addResolvingPromise(this._fetchLayerMetaData(this.layerUrl,e)),this}getLayerIdBySourceId(e){if(this.dataElement){const r=this.dataElement.domainNetworks;for(const t of r){for(const r of t.edgeSources?t.edgeSources:[])if(r.sourceId===e)return r.layerId;for(const r of t.junctionSources?t.junctionSources:[])if(r.sourceId===e)return r.layerId}return null}return null}async _fetchLayerMetaData(e,t){const o=await r(e,{responseType:"json",query:{f:"json"},...t});this.sourceJSON=o.data,this.read(o.data,{origin:"service"})}async _fetchDataElement(e,t,o){if(this.dataElement)return;const s=await r(`${e}/queryDataElements`,{responseType:"json",query:{layers:JSON.stringify([t]),f:"json"},...o}).then((e=>e.data.layerDataElements?.[0]));s&&this.read(s,{origin:"service"})}};e([l({type:String,nonNullable:!0,json:{origins:{"web-map":{read:!0,write:{isRequired:!0}}},read:!1}})],y.prototype,"id",void 0),e([l({type:String,nonNullable:!0,json:{origins:{"web-map":{read:!0,write:{isRequired:!0}}},read:!1}})],y.prototype,"title",void 0),e([l({type:String,nonNullable:!0,json:{origins:{"web-map":{read:{source:"url"},write:{target:"url",isRequired:!0}}},read:!1}})],y.prototype,"layerUrl",void 0),e([l({type:Object,json:{origins:{service:{read:!0}},read:!1}})],y.prototype,"dataElement",void 0),e([l({type:c,json:{origins:{service:{read:{source:"extent"}}},read:!1}})],y.prototype,"fullExtent",void 0),e([l({type:u,json:{origins:{service:{read:{source:"extent.spatialReference"}}},read:!1}})],y.prototype,"spatialReference",void 0),e([l({type:["utility","trace"],readOnly:!0,json:{read:!1,write:!1}})],y.prototype,"type",void 0),e([l({readOnly:!0})],y.prototype,"datasetName",null),e([l({readOnly:!0})],y.prototype,"owner",null),e([l({readOnly:!0})],y.prototype,"schemaGeneration",null),e([l({readOnly:!0})],y.prototype,"parsedUrl",null),e([l({readOnly:!0})],y.prototype,"featureServiceUrl",null),e([l({readOnly:!0})],y.prototype,"networkServiceUrl",null),e([l({readOnly:!0})],y.prototype,"layerId",null),e([l()],y.prototype,"sourceJSON",void 0),y=e([p("esri.networks.Network")],y);const h=y;export{h as default};
