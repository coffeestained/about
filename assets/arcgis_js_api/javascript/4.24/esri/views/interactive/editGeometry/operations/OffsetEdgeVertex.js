// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.24/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../core/mathUtils ../../../../core/maybe ../../../../chunks/vec2 ../../../../chunks/vec2f64 ../../../../chunks/vec3 ../../../../chunks/vec3f64 ../../../../geometry/support/plane ../../../../geometry/support/vector ../../../support/geometry2dUtils".split(" "),function(q,z,A,m,u,r,c,g,k,w,x){let B=function(){function h(a,b,d,f=0,l=t.IMMEDIATE){this.helper=a;this.planeType=b;this.edge=d;this.distance=f;this._plane=k.create();this._offsetPlane=
k.create();this._minDistance=-Infinity;this._maxDistance=Infinity;l===t.IMMEDIATE&&this._initialize()}var e=h.prototype;e._initialize=function(){this._initializeNeighbors();this._initializePlane();this._initializeDistanceConstraints()};e._initializeNeighbors=function(){var a,b,d,f;const l=this._toXYZ(this.edge.leftVertex.pos),n=this._toXYZ(null==(a=this.edge.leftVertex.leftEdge)?void 0:null==(b=a.leftVertex)?void 0:b.pos);a=this._toXYZ(this.edge.rightVertex.pos);b=this._toXYZ(null==(d=this.edge.rightVertex.rightEdge)?
void 0:null==(f=d.rightVertex)?void 0:f.pos);this._edgeDirection=c.direction(g.create(),l,a);this._left=this._computeNeighbor(l,n,this._edgeDirection);this._right=this._computeNeighbor(a,b,this._edgeDirection)};e._toXYZ=function(a){return m.isSome(a)?this.helper.toXYZ(a):null};e._computeNeighbor=function(a,b,d){if(m.isNone(b))return{start:a,end:b,direction:g.fromValues(-d[1],d[0],0),isOriginalDirection:!0};const f=c.direction(g.create(),a,b),l=!this._passesBisectingAngleThreshold(f,d);return{start:a,
end:b,direction:l?this._bisectVectorsPerpendicular(d,f):f,isOriginalDirection:!l}};e._passesBisectingAngleThreshold=function(a,b){a=Math.abs(w.angle(b,a));return a>=y&&a<=Math.PI-y};e._bisectVectorsPerpendicular=function(a,b){a=0>c.dot(a,b)?a:c.negate(g.create(),a);const d=Math.abs(c.dot(a,b));if(!(.001>d||.999<d))return this._bisectDirection(a,b);b=c.cross(g.create(),a,[0,0,1]);return c.normalize(b,b)};e._bisectDirection=function(a,b){a=c.add(g.create(),a,b);return c.normalize(a,a)};e._initializePlane=
function(){const a=this._computeNormalDirection(this._left),b=this._computeNormalDirection(this._right);0>c.dot(a,b)&&c.negate(b,b);k.fromPositionAndNormal(this._left.start,this._bisectDirection(a,b),this._plane)};e._computeNormalDirection=function(a){a=c.cross(g.create(),a.direction,this._edgeDirection);c.normalize(a,a);a=c.cross(g.create(),this._edgeDirection,a);this.planeType===q.PlaneType.XY&&(a[2]=0);return c.normalize(a,a)};e._initializeDistanceConstraints=function(){m.isSome(this._left.end)&&
!this.requiresSplitEdgeLeft&&this._updateDistanceConstraint(k.signedDistance(this._plane,this._left.end));m.isSome(this._right.end)&&!this.requiresSplitEdgeRight&&this._updateDistanceConstraint(k.signedDistance(this._plane,this._right.end));this._updateIntersectDistanceConstraint(this._plane)};e._updateDistanceConstraint=function(a){0>=a&&(this._minDistance=Math.max(this._minDistance,a));0<=a&&(this._maxDistance=Math.min(this._maxDistance,a))};e._updateIntersectDistanceConstraint=function(a){var b=
k.normal(a);const d=this._edgeDirection;var f=c.add(g.create(),this._left.start,this._left.direction);const l=c.add(g.create(),this._right.start,this._right.direction);var n=this._pointInBasis2D(r.create(),b,d,this._left.start),p=this._pointInBasis2D(r.create(),b,d,f),v=this._pointInBasis2D(r.create(),b,d,this._right.start);b=this._pointInBasis2D(r.create(),b,d,l);[v]=x.intersectLineAndRay({start:p,end:n,type:x.LineType.LINE},{start:b,end:v,type:x.LineType.LINE});v&&(n=u.subtract(r.create(),n,p),
u.normalize(n,n),p=u.subtract(r.create(),v,p),p=u.dot(n,p),f=c.add(g.create(),f,c.scale(g.create(),this._left.direction,-p)),a=k.signedDistance(a,f),this._updateDistanceConstraint(a))};e._pointInBasis2D=function(a,b,d,f){a[0]=w.projectPointSignedLength(b,f);a[1]=w.projectPointSignedLength(d,f);return a};e._offset=function(a,b){Number.isFinite(this._minDistance)&&(b=Math.max(this._minDistance,b));Number.isFinite(this._maxDistance)&&(b=Math.min(this._maxDistance,b));k.copy(this._offsetPlane,this._plane);
this._offsetPlane[3]-=b;b=(f,l,n)=>m.isSome(l)&&k.intersectLine(this._offsetPlane,f,c.add(g.create(),f,l),n);const d=g.create();(a===this.edge.leftVertex?b(this._left.start,this._left.direction,d):b(this._right.start,this._right.direction,d))&&this.helper.copy(this.helper.fromXYZ(d,void 0,this.helper.getM(a.pos)),a.pos)};e.signedDistanceToPoint=function(a){return k.signedDistance(this.plane,this.helper.toXYZ(this.helper.pointToVector(a)))};e.apply=function(a){this._offset(a,this.distance)};e.undo=
function(a){this._offset(a,0)};e.canAccumulate=function(a){return a instanceof h&&this.edge.leftVertex.index===a.edge.leftVertex.index&&this.edge.rightVertex.index===a.edge.rightVertex.index&&this.edge.component===a.edge.component&&this._maybeEqualsVec3(this._left.direction,a._left.direction)&&this._maybeEqualsVec3(this._right.direction,a._right.direction)&&c.equals(k.normal(this._plane),k.normal(a._plane))};e.accumulate=function(a,b){this._offset(a,this._plane[3]-b._plane[3]+b.distance)};e.accumulateParams=
function(a){this.distance=a.distance-a._plane[3]+this._plane[3]};e.clone=function(){const a=new h(this.helper,this.planeType,this.edge,this.distance,t.DEFERRED);k.copy(a._plane,this._plane);k.copy(a._offsetPlane,this._offsetPlane);a._maxDistance=this._maxDistance;a._minDistance=this._minDistance;a._left=this._cloneNeighbor(this._left);a._right=this._cloneNeighbor(this._right);a._edgeDirection=c.copy(g.create(),this._edgeDirection);return a};e._maybeEqualsVec3=function(a,b){return m.isNone(a)&&m.isNone(b)||
m.isSome(a)&&m.isSome(b)&&c.equals(a,b)};e._cloneNeighbor=function({start:a,end:b,direction:d,isOriginalDirection:f}){return{start:c.copy(g.create(),a),end:m.isSome(b)?c.copy(g.create(),b):null,direction:c.copy(g.create(),d),isOriginalDirection:f}};z._createClass(h,[{key:"plane",get:function(){return this._plane}},{key:"requiresSplitEdgeLeft",get:function(){return!this._left.isOriginalDirection}},{key:"requiresSplitEdgeRight",get:function(){return!this._right.isOriginalDirection}},{key:"edgeDirection",
get:function(){return this._edgeDirection}}]);return h}();const y=A.deg2rad(15);q.PlaneType=void 0;(function(h){h[h.XYZ=0]="XYZ";h[h.XY=1]="XY"})(q.PlaneType||(q.PlaneType={}));var t;(function(h){h[h.IMMEDIATE=0]="IMMEDIATE";h[h.DEFERRED=1]="DEFERRED"})(t||(t={}));q.OffsetEdgeVertex=B;Object.defineProperties(q,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});