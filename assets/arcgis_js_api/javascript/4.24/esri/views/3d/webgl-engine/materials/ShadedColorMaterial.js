// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.24/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/vec3 ../../../../chunks/vec3f64 ../../../../chunks/vec4f64 ../../../../geometry/support/aaBoundingBox ../../../../geometry/support/buffer/BufferView ../../support/buffer/InterleavedLayout ../core/shaderLibrary/ShaderOutputOptions ../lib/basicInterfaces ../lib/GLMaterial ../lib/GLMaterials ../lib/Material ../lib/RenderSlot ../lib/Util ../lib/VertexAttribute ./internal/bufferWriterUtils ./internal/MaterialUtil ../shaders/ShadedColorMaterialTechnique".split(" "),
function(p,q,l,r,x,y,H,I,n,J,K,L,z,m,M,e,A,B,t){let R=function(f){function d(b){b=f.call(this,b,new C)||this;b.supportsEdges=!0;b.techniqueConfig=new t.ShadedColorMaterialTechniqueConfiguration;b._vertexAttributeLocations=t.ShadedColorMaterialVertexAttrLocations;return b}q._inheritsLoose(d,f);var a=d.prototype;a.getConfiguration=function(b,c){this.techniqueConfig.output=b;this.techniqueConfig.cullFace=this.parameters.cullFace;this.techniqueConfig.hasSlicePlane=this.parameters.hasSlicePlane;this.techniqueConfig.transparent=
this.parameters.transparent;this.techniqueConfig.writeDepth=this.parameters.writeDepth;this.techniqueConfig.screenSizeEnabled=this.parameters.screenSizeEnabled;this.techniqueConfig.shadingEnabled=this.parameters.shadingEnabled;this.techniqueConfig.transparencyPassType=c.transparencyPassType;this.techniqueConfig.hasMultipassTerrain=c.multipassTerrain.enabled;this.techniqueConfig.cullAboveGround=c.multipassTerrain.cullAboveGround;return this.techniqueConfig};a.intersect=function(b,c,u,k,D,E,F){if(this.parameters.screenSizeEnabled){const v=
b.vertexAttributes.get(e.VertexAttribute.OFFSET);B.intersectTriangleGeometry(b,c,k,D,E,{applyToVertex:(g,w,N,h)=>{h=l.set(G,v.data[3*h],v.data[3*h+1],v.data[3*h+2]);g=l.set(O,g,w,N);l.scale(h,h,this.parameters.screenSizeScale*k.camera.computeRenderPixelSizeAt(h));l.add(g,g,h);return[g[0],g[1],g[2]]},applyToAabb:g=>{const w=y.center(g,G);return y.scale(g,this.parameters.screenSizeScale*k.camera.computeRenderPixelSizeAt(w))}},F)}else B.intersectTriangleGeometry(b,c,k,D,E,void 0,F)};a.requiresSlot=function(b,
c){if(L.outputFromPass(c)===n.ShaderOutput.Highlight)return b===m.RenderSlot.OPAQUE_MATERIAL;c=m.RenderSlot.OPAQUE_MATERIAL;this.parameters.transparent&&(c=this.parameters.writeDepth?m.RenderSlot.TRANSPARENT_MATERIAL:m.RenderSlot.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL);return b===c||b===m.RenderSlot.DRAPED_MATERIAL};a.createGLMaterial=function(b){return b.output===n.ShaderOutput.Color||b.output===n.ShaderOutput.Alpha||b.output===n.ShaderOutput.Highlight?new P(b):null};a.createBufferWriter=function(){return new Q(this.parameters.screenSizeEnabled)};
return d}(z.Material),P=function(f){function d(){return f.apply(this,arguments)||this}q._inheritsLoose(d,f);d.prototype.beginSlot=function(a){return this.ensureTechnique(t.ShadedColorMaterialTechnique,a)};return d}(K),C=function(f){function d(){var a=f.apply(this,arguments)||this;a.color=x.fromValues(1,1,1,1);a.shadingTint=x.fromValues(0,0,0,.25);a.shadingDirection=l.normalize(r.create(),[.5,-.5,-.5]);a.screenSizeScale=14;a.transparent=!1;a.writeDepth=!0;a.hasSlicePlane=!1;a.cullFace=J.CullFaceOptions.None;
a.screenSizeEnabled=!1;a.shadingEnabled=!0;return a}q._inheritsLoose(d,f);return d}(z.MaterialParameters),Q=function(){function f(a){this.screenSizeEnabled=a;a=I.newLayout().vec3f(e.VertexAttribute.POSITION).vec3f(e.VertexAttribute.NORMAL);this.screenSizeEnabled&&a.vec3f(e.VertexAttribute.OFFSET);this.vertexBufferLayout=a}var d=f.prototype;d.allocate=function(a){return this.vertexBufferLayout.createBuffer(a)};d.elementCount=function(a){return a.indices.get(e.VertexAttribute.POSITION).length};d.write=
function(a,b,c,u){A.writeDefaultAttributes(b,this.vertexBufferLayout,a.transformation,a.invTranspTransformation,c,u);if(this.screenSizeEnabled)if(b.vertexAttributes.has(e.VertexAttribute.OFFSET)){const k=b.vertexAttributes.get(e.VertexAttribute.OFFSET);b=b.indices.get(e.VertexAttribute.OFFSET);M.assert(3===k.size);if(c=c.getField(e.VertexAttribute.OFFSET,H.BufferViewVec3f))A.writePosition(b,k.data,a.invTranspTransformation,c,u);else throw Error("unable to acquire view for "+e.VertexAttribute.OFFSET);
}else throw Error(`${e.VertexAttribute.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);};return f}();const G=r.create(),O=r.create();p.ShadedColorMaterial=R;p.ShadedColorMaterialParameters=C;Object.defineProperties(p,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});