// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.24/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/_rollupPluginBabelHelpers ../../../../../chunks/tslib.es6 ../../../../../core/mathUtils ../../../../../core/screenUtils ../../../../../core/accessorSupport/decorators/property ../../../../../core/arrayUtils ../../../../../core/has ../../../../../core/accessorSupport/ensureType ../../../../../core/accessorSupport/decorators/subclass ../../../../../chunks/vec3 ../../../../../chunks/vec3f64 ../../../../../geometry/support/axisAngle ../../../../../geometry/support/plane ../../../camera/constraintUtils ../../../camera/constraintUtils/common ../../../input/util ../InteractiveController ../momentum/PanPlanarMomentumController ../momentum/RotationMomentumController ../momentum/ZoomPlanarMomentumController ../../utils/navigationUtils ../../../webgl-engine/lib/Camera ../../../../navigation/PanPlanarMomentumEstimator ../../../../navigation/RotationMomentumEstimator ../../../../navigation/ZoomMomentumEstimator".split(" "),
function(q,v,w,B,r,C,O,P,Q,D,e,k,E,m,n,p,x,F,G,H,I,h,J,K,L,M){const y=k.fromValues(0,0,1);var N=16/180*Math.PI;q.PinchAndPanController=function(z){function t(a){a=z.call(this,a)||this;a.view=null;a.rotationValueSmooth=new x.ExponentialFalloff(.05);a.scalingValueSmooth=new x.ExponentialFalloff(.05);a.planeHorizontal=m.create();a.planeVertical=m.create();a.rotationMomentumEstimator=new L.RotationMomentumEstimator;a.panMomentumEstimator=new K.PanPlanarMomentumEstimator(300,12,.9);a.zoomMomentumEstimator=
new M.ZoomMomentumEstimator;a.beginCenter=k.create();a.tmpPoints=[];a.beginCenterScreen=r.createScreenPointArray();a.tmpCentroid3d=k.create();a.tmpCentroid2d=r.createScreenPointArray();a.tmp2d=r.createScreenPointArray();a.constraintOptions={selection:p.ConstraintTypes.ALL,interactionType:p.InteractionType.NONE,interactionFactor:0,interactionStartCamera:new J.Camera,interactionDirection:null,tiltMode:p.TiltMode.TUMBLE};return a}v._inheritsLoose(t,z);var u=t.prototype;u.begin=function(a){if(this.active){var f=
this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=f;this.rotationMomentumEstimator.enabled=f;this.panMomentumEstimator.enabled=f;this.beginRadius=a.radius;this.pointerCount=a.pointers.size;this.beginAngle=a.angle;this.rotationValueSmooth.reset();this.scalingValueSmooth.reset();r.screenPointObjectToArray(a.center,this.beginCenterScreen);m.fromNormalAndOffset(y,0,this.planeHorizontal);var c=k.create();f=this.intersectionHelper.intersectScreenFreePointFallback(this.beginCenterScreen,
c);var b=k.create();e.negate(b,this.startCamera.viewForward);var d=k.create();e.copy(d,y);var g=e.dot(b,d);this.panMode=B.asinClamped(0>g?-g:g)>=N?h.NavigationMode.Horizontal:h.NavigationMode.Vertical;m.setOffsetFromPoint(this.planeHorizontal,this.planeHorizontal,c);this.startCamera.aboveGround||m.negate(this.planeHorizontal,this.planeHorizontal);if(this.panMode===h.NavigationMode.Vertical){e.scale(d,d,g);e.subtract(this.planeVertical,b,d);e.normalize(this.planeVertical,this.planeVertical);m.setOffsetFromPoint(this.planeVertical,
this.planeVertical,c);b=k.create();d=k.create();g=k.create();e.subtract(b,c,this.currentCamera.eye);c=e.length(b);e.normalize(b,b);var l=5*Math.max(Math.abs(this.view.camera.position.z),50);const A=this.view._stage.renderView.getMinimalDepthForArea(this.view.voxelWasm,this.beginCenterScreen[0],this.beginCenterScreen[1],this.view.state.camera,80);l=A?Math.min(A,l):l;l=f?Math.min(l,c):l;e.copy(g,e.add(d,this.currentCamera.eye,e.scale(d,b,l)));this.planeVertical[3]=-e.dot(this.planeVertical,g);this.computePlanePoints(a.pointers,
this.planeVertical,this.startCamera,this.tmpPoints)}else this.computePlanePoints(a.pointers,this.planeHorizontal,this.startCamera,this.tmpPoints);h.centroid(this.tmpPoints,this.beginCenter);this.constraintOptions.interactionStartCamera.copyFrom(this.startCamera)}};u.update=function(a){if(this.active){this.currentCamera.copyFrom(this.startCamera);var f=1<a.pointers.size,c=this.panMode===h.NavigationMode.Horizontal?this.planeHorizontal:this.planeVertical,b=this.beginCenter;if(f){var d=this.beginRadius/
a.radius;this.scalingValueSmooth.gain=.001875*Math.min(Math.max(a.radius,40),120);this.scalingValueSmooth.update(d);h.applyZoomToPoint(this.currentCamera,b,this.scalingValueSmooth.value,this.view.state.constraints.minimumPoiDistance);this.zoomMomentumEstimator.add(this.scalingValueSmooth.value,.001*a.timestamp);this.constraintOptions.interactionType=p.InteractionType.ZOOM;this.constraintOptions.interactionFactor=n.pixelDistanceToInteractionFactor(Math.abs(a.radius-this.beginRadius));n.applyAll(this.view,
this.currentCamera,this.constraintOptions)}this.computePlanePoints(a.pointers,c,this.currentCamera,this.tmpPoints);h.centroid(this.tmpPoints,this.tmpCentroid3d);r.screenPointObjectToArray(a.center,this.tmpCentroid2d);h.applyPanPlanar(this.currentCamera,b,this.tmpCentroid3d);this.panMomentumEstimator.add(this.tmpCentroid2d,this.tmpCentroid3d,.001*a.timestamp);this.constraintOptions.interactionType=p.InteractionType.PAN;this.constraintOptions.interactionFactor=n.pixelDistanceToInteractionFactor(this.beginCenterScreen,
this.tmpCentroid2d);n.applyAll(this.view,this.currentCamera,this.constraintOptions);f&&(f=this.planeHorizontal,c=this.rotationValueSmooth.value,d=h.normalizeRotationDelta(a.angle-c),c+=d,this.rotationValueSmooth.gain=.00125*Math.min(Math.max(a.radius,40),120),this.rotationValueSmooth.update(c),c=this.rotationValueSmooth.value-this.beginAngle,this.rotationMomentumEstimator.add(c,.001*a.timestamp),h.applyRotation(this.currentCamera,b,E.wrapAxisAngle(f,c)),this.constraintOptions.interactionType=p.InteractionType.TUMBLE,
this.constraintOptions.interactionFactor=n.pixelDistanceToInteractionFactor(Math.abs(a.radius*c)),n.applyAll(this.view,this.currentCamera,this.constraintOptions))}};u.end=function(a){a.pointers.size===this.pointerCount&&this.update(a);this.finishController();return(a=this.zoomMomentumEstimator.evaluateMomentum())?new I.ZoomPlanarMomentumController({view:this.view,momentum:a,zoomCenter:this.beginCenter}):(a=this.rotationMomentumEstimator.evaluateMomentum())?new H.RotationMomentumController({view:this.view,
momentum:a,center:this.beginCenter,axis:m.normal(this.planeHorizontal)}):(a=this.panMomentumEstimator.evaluateMomentum())?new G.PanPlanarMomentumController({view:this.view,momentum:a}):null};u.computePlanePoints=function(a,f,c,b){b.length=a.size;const d=this.tmp2d;let g=0;a.forEach(l=>{d[0]=l.x;d[1]=l.y;void 0===b[g]&&(b[g]=k.create());h.intersectPlaneFromScreenPointAtEye(f,c,d,b[g]);g+=1});return b};v._createClass(t,[{key:"intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]);
return t}(F.InteractiveController);w.__decorate([C.property({constructOnly:!0})],q.PinchAndPanController.prototype,"view",void 0);q.PinchAndPanController=w.__decorate([D.subclass("esri.views.3d.state.controllers.local.PinchAndPanController")],q.PinchAndPanController);Object.defineProperties(q,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});