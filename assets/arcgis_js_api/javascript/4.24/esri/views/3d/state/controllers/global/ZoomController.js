// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.24/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/_rollupPluginBabelHelpers ../../../../../chunks/tslib.es6 ../../../../../core/mathUtils ../../../../../core/screenUtils ../../../../../core/accessorSupport/decorators/property ../../../../../core/arrayUtils ../../../../../core/has ../../../../../core/accessorSupport/ensureType ../../../../../core/accessorSupport/decorators/subclass ../../../../../chunks/vec2 ../../../../../chunks/vec2f64 ../../../../../chunks/vec3 ../../../../../chunks/vec3f64 ../../../../../geometry/projectionEllipsoid ../../../../../geometry/support/axisAngle ../../../../../chunks/sphere ../../../camera/constraintUtils ../../../camera/constraintUtils/common ../InteractiveController ../../utils/navigationUtils ../../../support/geometryUtils/ray ../../../webgl-engine/lib/verticalOffsetUtils ../../../camera/constraintUtils/surfaceCollision".split(" "),
function(h,q,r,x,y,z,J,K,L,A,B,t,c,g,C,u,D,v,n,E,e,F,G,H){h.ZoomController=function(w){function l(a){a=w.call(this,a)||this;a.view=null;a.pickPoint=g.create();a.tmpP0=t.create();a.panAxisAngle=u.create();a.tmpRayDir=g.create();a.tmpRayDirPick=g.create();a.targetOnSphere=g.create();a.tmpRay={origin:g.create(),direction:g.create()};a.dragBeginPoint=y.createScreenPointArray();a.normalizedAnchorPoint=t.create();a.constraintOptions={selection:n.ConstraintTypes.ALL_EXCEPT_COLLISION,interactionType:n.InteractionType.ZOOM,
interactionFactor:0,interactionStartCamera:null,interactionDirection:null,tiltMode:n.TiltMode.TUMBLE};a.sphere=D.create();a.hasPickPoint=!1;return a}q._inheritsLoose(l,w);var p=l.prototype;p.begin=function(a){if(this.active){B.copy(this.dragBeginPoint,a);e.normalizeCoordinate(this.startCamera,a,this.normalizedAnchorPoint);var b=C.getReferenceEllipsoid(this.view.spatialReference),d=e.pickPointAndInitSphere(this.intersectionHelper,this.startCamera,a,b,e.SpherePickPointFallback.Ellipsoid,0===this.view.map.ground.opacity?
I:{});this.navMode=e.decideNavigationMode(this.startCamera,a,d.hasGeometryIntersection,b);if(this.navMode===e.NavigationMode.Horizontal)this.hasPickPoint=!!d.scenePickPoint,this.pickPoint=d.scenePickPoint,this.sphere=d.sphere;else{F.fromScreenAtEye(this.startCamera,a,this.tmpRay);c.normalize(this.tmpRay.direction,this.tmpRay.direction);let f,k;d.scenePickPoint&&(c.subtract(this.tmpRayDirPick,this.startCamera.eye,d.scenePickPoint),k=c.length(this.tmpRayDirPick));this.view.camera.position.hasZ&&(f=
Math.abs(this.view.camera.position.z));b=x.clamp(e.PIVOT_DISTANCE_MODIFIER*f,e.DISTANCE_CLAMP_VALUES[0],e.DISTANCE_CLAMP_VALUES[1]);b=(a=this.view._stage.renderView.getMinimalDepthForArea(null,a[0],a[1],this.view.state.camera,e.SCREEN_PIXEL_AREA))?Math.min(b,a):b;b=d.scenePickPoint?Math.min(b,k):b;this.hasPickPoint=!0;c.scale(this.tmpRay.direction,this.tmpRay.direction,b);c.add(this.pickPoint,this.tmpRay.origin,this.tmpRay.direction)}this.constraintOptions.interactionStartCamera=this.startCamera}};
p.update=function(a){if(this.active){this.currentCamera.eye=this.startCamera.eye;this.currentCamera.center=this.startCamera.center;this.currentCamera.up=this.startCamera.up;if(this.navMode===e.NavigationMode.Horizontal){c.subtract(this.tmpRayDir,this.currentCamera.center,this.currentCamera.eye);var b=c.length(this.tmpRayDir);e.normalizeCoordinate(this.currentCamera,a,this.tmpP0);var d=12*(this.normalizedAnchorPoint[1]-this.tmpP0[1]),f=b*2**d;const k=this.view.state.constraints.minimumPoiDistance;
0>d&&f<k&&(f=k);if(1E-6>Math.abs(b-f))return;this.hasPickPoint&&f<b&&(d=1-(1-f/b)*(1-this.sphere[3]/c.length(this.currentCamera.center)),this.currentCamera.center=c.scale(m,this.currentCamera.center,d));c.scale(this.tmpRayDir,this.tmpRayDir,-f/b);this.currentCamera.eye=c.add(m,this.currentCamera.center,this.tmpRayDir);this.constraintOptions.interactionFactor=v.pixelDistanceToInteractionFactor(this.dragBeginPoint,a);v.applyAll(this.view,this.currentCamera,this.constraintOptions);this.hasPickPoint&&
(e.sphereOrPlanePointFromScreenPoint(this.sphere,this.currentCamera,this.dragBeginPoint,this.targetOnSphere),u.fromPoints(this.pickPoint,this.targetOnSphere,this.panAxisAngle),e.applyRotation(this.currentCamera,this.sphere,this.panAxisAngle))}else{b=c.length(this.tmpRay.direction);e.normalizeCoordinate(this.currentCamera,a,this.tmpP0);a=12*(this.normalizedAnchorPoint[1]-this.tmpP0[1]);f=b*2**a;d=this.view.state.constraints.minimumPoiDistance;0>a&&f<d&&(f=d);if(1E-6>Math.abs(b-f))return;c.scale(this.tmpRayDir,
this.tmpRay.direction,1-f/b);this.currentCamera.eye=c.add(m,this.currentCamera.eye,this.tmpRayDir);this.currentCamera.center=c.add(m,this.currentCamera.center,this.tmpRayDir)}H.applySurfaceCollisionConstraint(this.view,this.currentCamera)}};p.end=function(){this.active&&this.finishController()};q._createClass(l,[{key:"intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]);return l}(E.InteractiveController);r.__decorate([z.property({constructOnly:!0})],h.ZoomController.prototype,
"view",void 0);h.ZoomController=r.__decorate([A.subclass("esri.views.3d.state.controllers.global.ZoomController")],h.ZoomController);const m=g.create(),I={exclude:new Set([G.TERRAIN_ID])};Object.defineProperties(h,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});