// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.24/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/_rollupPluginBabelHelpers ../../../../../chunks/tslib.es6 ../../../../../intl ../../../../../core/Accessor ../../../../../core/has ../../../../../core/Handles ../../../../../core/mathUtils ../../../../../core/maybe ../../../../../core/quantityFormatUtils ../../../../../core/quantityUtils ../../../../../core/reactiveUtils ../../../../../core/unitUtils ../../../../../core/accessorSupport/decorators/property ../../../../../core/arrayUtils ../../../../../core/accessorSupport/ensureType ../../../../../core/accessorSupport/decorators/subclass ../../../../../chunks/mat4 ../../../../../chunks/mat4f64 ../../../../../chunks/vec3 ../../../../../chunks/vec3f64 ../../support/viewUtils ../../../interactive/visualElements/LabelVisualElement ../../../interactive/visualElements/LineVisualElement ../../../interactive/visualElements/MeasurementAreaVisualElement ../../../interactive/visualElements/support/Segment ../../../webgl-engine/lib/Material ../../../webgl-engine/materials/lineStippleUtils ../../../../../intl/locale ../../../../../intl/messages".split(" "),
function(m,F,n,Y,J,Z,K,L,g,G,M,C,x,p,aa,ba,N,O,P,H,v,Q,D,y,R,z,A,S,T,U){m.AreaMeasurementVisualization=function(r){function E(a){a=r.call(this,a)||this;a._handles=new K;a._params={...V};a._path=null;a._intersectedPath=null;a._perimeter=null;a._intersectedPerimeter=null;a._projectionLines=null;a._measurementArea=null;a._areaLabel=null;a._pathLengthLabel=null;a._cursorSegmentLengthLabel=null;a._perimeterLengthLabel=null;a._pathSegments=[];a._perimeterSegments=[];a._cursorSegment=null;a._origin=v.create();
a._originTransform=P.create();a._cursorPositionRenderSpace=v.create();a.messages=null;a.viewData=W;a.areaLabel=null;a.perimeterLengthLabel=null;a.loadingMessages=!0;return a}F._inheritsLoose(E,r);var h=E.prototype;h.initialize=function(){var a=this;const {analysisViewData:b,_params:c,view:e}=this;this._path=new y.LineVisualElement({view:e,attached:!0,width:c.pathLineWidth,color:c.pathLineColor,polygonOffset:!0,renderOccluded:A.RenderOccludedFlag.OccludeAndTransparent});this._intersectedPath=new y.LineVisualElement({view:e,
attached:!0,width:c.pathLineWidth,color:c.intersectingLineColor,polygonOffset:!0,renderOccluded:A.RenderOccludedFlag.OccludeAndTransparent});this._perimeter=new y.LineVisualElement({view:e,attached:!0,width:c.perimeterLineWidth,color:c.perimeterLineColor,polygonOffset:!0,renderOccluded:A.RenderOccludedFlag.OccludeAndTransparent});this._intersectedPerimeter=new y.LineVisualElement({view:e,attached:!0,width:c.perimeterLineWidth,color:c.intersectingLineColor,polygonOffset:!0,renderOccluded:A.RenderOccludedFlag.OccludeAndTransparent});
this._projectionLines=new y.LineVisualElement({view:e,attached:!0,width:c.projectionLineWidth,color:c.projectionLineColor,stipplePattern:S.createStipplePatternSimple(c.projectionLineStippleSize),polygonOffset:!0,renderOccluded:A.RenderOccludedFlag.OccludeAndTransparent});this._measurementArea=new R.MeasurementAreaVisualElement({view:e,attached:!0,color1:c.areaColor1,color2:c.areaColor2});this._areaLabel=new D.LabelVisualElement({view:e,attached:!0,fontSize:w.Large});this._pathLengthLabel=new D.LabelVisualElement({view:e,
attached:!0,fontSize:w.Small});this._cursorSegmentLengthLabel=new D.LabelVisualElement({view:e,attached:!0,fontSize:w.Small});this._perimeterLengthLabel=new D.LabelVisualElement({view:e,attached:!0,fontSize:w.Small});this._handles.add([C.watch(()=>[b.mode,this.visible,b.unit,b.measurementData,b.cursorPoint],()=>this._update(),C.syncAndInitial),C.watch(()=>{var f;return null==(f=e.state)?void 0:f.camera},()=>this._updateLabels(),C.syncAndInitial),T.onLocaleChange(F._asyncToGenerator(function*(){return a._updateMessageBundle()}))]);
this._updateMessageBundle()};h.destroy=function(){this._measurementArea=g.destroyMaybe(this._measurementArea);this._path=g.destroyMaybe(this._path);this._intersectedPath=g.destroyMaybe(this._intersectedPath);this._perimeter=g.destroyMaybe(this._perimeter);this._intersectedPerimeter=g.destroyMaybe(this._intersectedPerimeter);this._areaLabel=g.destroyMaybe(this._areaLabel);this._pathLengthLabel=g.destroyMaybe(this._pathLengthLabel);this._cursorSegmentLengthLabel=g.destroyMaybe(this._cursorSegmentLengthLabel);
this._perimeterLengthLabel=g.destroyMaybe(this._perimeterLengthLabel);this._projectionLines=g.destroyMaybe(this._projectionLines);this._handles=g.destroyMaybe(this._handles);this.set("view",null)};h._update=function(){if(!this.destroyed&&this.view.ready&&this.view.renderCoordsHelper){var {analysisViewData:{measurementData:a},analysisViewData:b}=this;g.isNone(a)||(this._updateViewData(a,b.path,b.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),
this._updateProjectionLines(),this._updateLabels())}};h._updateViewData=function(a,b,c){const e=b.isValidPolygon,f="geodesic"===a.actualMeasurementMode;var k=f?a.geodesicArea:a.area;let d=1;k&&(k=this._toPreferredAreaUnit(k,this.analysisViewData.unit),d=L.nextHighestPowerOfTen(Math.sqrt(k.value)/Math.sqrt(300)),d*=Math.sqrt(x.convertUnit(1,k.unit,"square-meters")),d/=a.unitNormalizer.normalizeDistance(1));this._set("viewData",{validMeasurement:e,path:b,pathVersion:b.version,cursorPoint:c,measurementData:a,
mode:a.actualMeasurementMode,positionsGeographic:a.positionsGeographic,positionsRenderCoords:a.positionsRenderCoords,positionsProjected:a.positionsProjectedWorldCoords,positionsFittedRenderCoords:a.positionsFittedRenderCoords,intersectingSegments:f?a.geodesicIntersectingSegments:a.intersectingSegments,triangleIndices:f?a.geodesicTriangleIndices:a.triangleIndices,fittingMode:a.fittingMode,areaCentroid:f?a.geodesicAreaCentroidRenderCoords:a.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:e?0:b.numVertices-
2,perimeterLengthLabelSegmentIndex:0,checkerSize:d})};h._updateOrigin=function(){Q.midpoint(this.viewData.positionsRenderCoords,this._origin);O.fromTranslation(this._originTransform,this._origin);this._measurementArea.transform=this._originTransform;this._projectionLines.transform=this._originTransform};h._createSegments=function(a){const b=this.viewData,c=b.path,e=this.view.renderCoordsHelper.spatialReference,f=b.mode,k=[],d=[],l=[],t=b.validMeasurement?c.numVertices:c.numVertices-1;for(let q=0;q<
t;++q){const u=b[a][q],I=b[a][(q+1)%c.numVertices];let B=null;switch(f){case "euclidean":B=new z.EuclideanSegment(u,I);break;case "geodesic":B=new z.GeodesicSegment(u,I,e)}b.intersectingSegments.has(q)?l.push(B):d.push(B);k.push(B)}return{all:k,nonIntersecting:d,intersecting:l}};h._updatePathSegments=function(){const {view:{renderCoordsHelper:a},viewData:b,visible:c}=this,e=this._createSegments("positionsRenderCoords"),{cursorPoint:f,mode:k,path:d}=b;var l=!d.isValidPolygon;const t=a.spatialReference;
this._cursorSegment=null;if(0<d.numVertices&&l&&g.isSome(f)&&a.toRenderCoords(f,this._cursorPositionRenderSpace)){l=b.positionsRenderCoords[d.numVertices-1];const q=this._cursorPositionRenderSpace;let u=null;switch(k){case "euclidean":u=new z.EuclideanSegment(l,q);break;case "geodesic":u=new z.GeodesicSegment(l,q,t)}e.nonIntersecting.push(u);this._cursorSegment=u}this._path.setGeometryFromSegments(e.nonIntersecting,this._origin);this._path.visible=c;this._intersectedPath.setGeometryFromSegments(e.intersecting,
this._origin);this._intersectedPath.visible=c;this._pathSegments=e.all};h._updatePerimeterSegments=function(){const a=this.visible&&"euclidean"===this.viewData.mode,b=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(b.nonIntersecting,this._origin);this._perimeter.visible=a;this._intersectedPerimeter.setGeometryFromSegments(b.intersecting,this._origin);this._intersectedPerimeter.visible=a;this._perimeterSegments=b.all};h._updateArea=function(){const a=this.viewData;
switch(a.mode){case "euclidean":this._updateAreaEuclidean(a);break;case "geodesic":this._updateAreaGeodesic()}};h._updateAreaEuclidean=function(a){const b=this.visible;a.validMeasurement&&0===a.intersectingSegments.size&&a.triangleIndices?(this._measurementArea.geometry={uv:a.positionsProjected,position:a.positionsFittedRenderCoords,triangleIndices:a.triangleIndices},this._measurementArea.size=[a.checkerSize,a.checkerSize],this._measurementArea.visible=b):this._measurementArea.visible=!1};h._updateAreaGeodesic=
function(){this._measurementArea.visible=!1};h._updateProjectionLines=function(){const a=this.viewData,b=this.visible,c=a.path;var e=a.mode;if(0<c.numVertices&&a.validMeasurement&&"euclidean"===e){e=[];for(let f=0;f<c.numVertices;++f){const k=v.create();H.subtract(k,a.positionsRenderCoords[f],this._origin);const d=v.create();H.subtract(d,a.positionsFittedRenderCoords[f],this._origin);e.push([k,d])}this._projectionLines.geometry=e;this._projectionLines.visible=b}else this._projectionLines.geometry=
null,this._projectionLines.visible=!1};h._updateLabels=function(){if(!this.destroyed){var {viewData:a}=this,{measurementData:b,mode:c,path:e}=a;if(e){var f=!e.isValidPolygon,k=this.visible,d=this._formatAreaLabel(this.messages,"geodesic"===c?b.geodesicArea:b.area,this.analysisViewData.unit);g.isSome(d)?(this._areaLabel.geometry={type:"point",point:a.areaCentroid},this._areaLabel.text=d,this._areaLabel.visible=a.validMeasurement&&0===a.intersectingSegments.size&&k):this._areaLabel.visible=!1;this._set("areaLabel",
g.unwrap(d));d=this._formatLengthLabel(this.messages,"geodesic"===c?b.geodesicPathLength:b.pathLength,this.analysisViewData.unit);if(g.isSome(d)&&0<=a.pathLengthLabelSegmentIndex&&a.pathLengthLabelSegmentIndex<this._pathSegments.length){var l=this._pathSegments[a.pathLengthLabelSegmentIndex],t=g.isSome(this._cursorSegment)?this._cursorSegment:X;this._pathLengthLabel.distance=this._params.labelDistance;this._pathLengthLabel.geometry={type:"corner",left:l,right:t};this._pathLengthLabel.text=d;this._pathLengthLabel.visible=
f&&0<e.numVertices&&k}else this._pathLengthLabel.visible=!1;d="geodesic"===c?a.measurementData.geodesicCursorSegmentLength:a.measurementData.cursorSegmentLength;g.isSome(d)?(l=this._formatLengthLabel(this.messages,d,this.analysisViewData.unit),this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=g.isSome(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=
g.unwrap(l),this._cursorSegmentLengthLabel.visible=f&&0!==d.value&&k):this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1);this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);f="geodesic"===a.mode;d=this._formatLengthLabel(this.messages,f?b.geodesicPathLength:b.perimeterLength,this.analysisViewData.unit);this._set("perimeterLengthLabel",g.unwrap(d));if(a.validMeasurement&&
0===a.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance;this._perimeterLengthLabel.anchor="top";this._perimeterLengthLabel.text=g.unwrap(d);l=this._perimeterLengthLabel.visible=!0;for(d=0;d<a.path.numVertices;++d)if(l=(a.perimeterLengthLabelSegmentIndex+d)%a.path.numVertices,t=f?this._pathSegments[l]:this._perimeterSegments[l],l=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:t,sampleLocation:"center"},this._perimeterLengthLabel.overlaps(this._areaLabel))l=
!1;else break;this._perimeterLengthLabel.visible=l&&k}else this._perimeterLengthLabel.visible=!1}}};h._toPreferredAreaUnit=function(a,b){return M.toUnit(a,this._preferredAreaUnit(a,b))};h._preferredAreaUnit=function(a,b){switch(b){case "metric":return x.preferredMetricAreaUnit(a.value,a.unit);case "imperial":return x.preferredImperialAreaUnit(a.value,a.unit);default:return b}};h._preferredLengthUnit=function(a,b){b=this._deriveLengthUnitFromAreaUnit(b);switch(b){case "metric":return x.preferredMetricLengthUnit(a.value,
a.unit);case "imperial":return x.preferredImperialLengthUnit(a.value,a.unit);default:return b}};h._deriveLengthUnitFromAreaUnit=function(a){switch(a){case "metric":return"metric";case "imperial":return"imperial";case "square-inches":return"inches";case "square-feet":return"feet";case "square-yards":return"yards";case "square-miles":return"miles";case "square-us-feet":return"us-feet";case "square-millimeters":return"millimeters";case "square-centimeters":return"centimeters";case "square-decimeters":return"decimeters";
case "square-meters":return"meters";case "square-kilometers":return"kilometers";case "acres":return"imperial";case "ares":case "hectares":return"metric"}throw Error("unhandled area unit");};h._formatAreaLabel=function(a,b,c){return a&&b&&G.formatDecimal(a,b,this._preferredAreaUnit(b,c))};h._formatLengthLabel=function(a,b,c){return a&&b&&G.formatDecimal(a,b,this._preferredLengthUnit(b,c))};h._updateMessageBundle=function(){this.loadingMessages=!0;U.fetchMessageBundle("esri/core/t9n/Units").then(a=>
{this.messages=a;this.view&&this._update()}).finally(()=>{this.loadingMessages=!1})};F._createClass(E,[{key:"visible",get:function(){return this.analysisViewData.visible}},{key:"testData",get:function(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}}]);return E}(J);n.__decorate([p.property()],m.AreaMeasurementVisualization.prototype,"view",void 0);n.__decorate([p.property()],m.AreaMeasurementVisualization.prototype,
"messages",void 0);n.__decorate([p.property()],m.AreaMeasurementVisualization.prototype,"analysis",void 0);n.__decorate([p.property()],m.AreaMeasurementVisualization.prototype,"viewData",void 0);n.__decorate([p.property()],m.AreaMeasurementVisualization.prototype,"analysisViewData",void 0);n.__decorate([p.property({readOnly:!0})],m.AreaMeasurementVisualization.prototype,"areaLabel",void 0);n.__decorate([p.property({readOnly:!0})],m.AreaMeasurementVisualization.prototype,"perimeterLengthLabel",void 0);
n.__decorate([p.property()],m.AreaMeasurementVisualization.prototype,"loadingMessages",void 0);n.__decorate([p.property()],m.AreaMeasurementVisualization.prototype,"visible",null);m.AreaMeasurementVisualization=n.__decorate([N.subclass("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],m.AreaMeasurementVisualization);var w;(function(r){r[r.Small=12]="Small";r[r.Large=16]="Large"})(w||(w={}));const V={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,
laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,
labelDistance:25},W={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null},X=new z.EuclideanSegment(v.create(),v.create());Object.defineProperties(m,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});