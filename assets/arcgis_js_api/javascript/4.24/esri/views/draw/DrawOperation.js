// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.24/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../core/Evented ../../core/HandleOwner ../../core/lang ../../core/maybe ../../core/promiseUtils ../../core/quantityUtils ../../core/reactiveUtils ../../core/screenUtils ../../core/unitUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/subclass ../../layers/graphics/dehydratedFeatureComparison ../../support/elevationInfoUtils ../ViewingMode ./DrawingMode ./DrawManipulator ../interactive/coordinateHelper ../interactive/dragEventPipeline ../interactive/editGeometry/EditGeometry ../interactive/editGeometry/EditGeometryOperations ../interactive/sketch/SketchLabelOptions ../interactive/sketch/SketchTooltipOptions ../interactive/snapping/SnappingContext ../interactive/snapping/SnappingDragPipelineStep ../interactive/snapping/SnappingOperation ../interactive/tooltip/DrawTooltipInfos ../interactive/tooltip/Tooltip ../interactive/tooltip/support/measurements".split(" "),
function(g,y,k,G,H,I,c,J,r,q,K,L,l,W,M,N,O,P,z,Q,R,v,A,S,B,C,D,T,U,w,V,E){g.DrawOperation=function(F){function t(a){var b=F.call(this,a)||this;b._createOperationCompleted=!1;b._pointerDownStates=new Set;b._snappingPipeline=new T.SnappingPipeline;b._tooltip=null;b._tooltipContext={calculateElevation:null,calculateTotalLength:null,calculateArea:null};b.isDraped=!0;b.labelOptions=new B;b.tooltipOptions=new C;b.snapToSceneEnabled=null;c.isNone(a.elevationInfo)&&(b.elevationInfo={mode:a.hasZ?"absolute-height":
"on-the-ground",offset:0});return b}y._inheritsLoose(t,F);var f=t.prototype;f.initialize=function(){const {geometryType:a,view:b}=this,{spatialReference:d}=b,h="viewingMode"in b.state?b.state.viewingMode:P.ViewingMode.Local,p="segment"===a||"multipoint"===a?"polyline":a;this.coordinateHelper=R.createCoordinateHelper(this.hasZ,this.hasM,d);this._editGeometryOperations=new S.EditGeometryOperations(new A.EditGeometry(p,this.coordinateHelper));this._snappingOperation=new U.SnappingOperation({view:b});
this.handles.add(q.watch(()=>this.stagedVertex,(e,n)=>{c.isSome(this._tooltip)&&(c.isSome(n)!==c.isSome(e)?this._tooltip.info=this._getTooltipInfo():this._updateTooltipInfo());c.isNone(e)||this.emit("cursor-update",{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(e)}],operation:"apply",type:"vertex-update"})},{sync:!0,equals:(e,n)=>c.equalsMaybe(e,n,N.pointEquals)}));this._activeComponent=new A.Component(d,h);
this._editGeometryOperations.data.components.push(this._activeComponent);const m=this.segmentLabels;c.isSome(m)&&(m.context={view:b,editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,labelOptions:this.labelOptions},this.handles.add([q.watch(()=>this.labelOptions.enabled,e=>{m.visible=e},q.syncAndInitial),this.on("cursor-update",()=>{const e=this.stagedVertex;m.stagedVertex=c.isSome(e)?this.coordinateHelper.pointToVector(e):null})]));this.handles.add(this._editGeometryOperations.on(["vertex-add",
"vertex-update","vertex-remove"],e=>{const n=e.vertices.map(u=>({componentIndex:0,vertexIndex:u.index,coordinates:this.coordinateHelper.vectorToArray(u.pos)})),x=n.map(u=>u.coordinates);switch(e.type){case "vertex-add":this.emit(e.type,{...e,added:x,vertices:n});break;case "vertex-update":this.emit(e.type,{...e,updated:x,vertices:n});break;case "vertex-remove":this.emit(e.type,{...e,removed:x,vertices:n})}}));this._manipulator=new Q.DrawManipulator({grabbableForEvent:e=>"click"!==this.drawingMode?
!0:"touch"===e.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size});this.manipulators.add(this._manipulator);this._manipulator.grabbable="point"!==a;this.handles.add([this._createManipulatorDragPipeline(this._manipulator),this._manipulator.events.on("immediate-click",e=>this._onImmediateClick(e)),this._manipulator.events.on("immediate-double-click",e=>this._onImmediateDoubleClick(e)),q.watch(()=>this.tooltipOptions.enabled,e=>{this._tooltip=e?new V.Tooltip({view:b,info:this._getTooltipInfo()}):
c.destroyMaybe(this._tooltip)},q.initial),this._editGeometryOperations.on(["vertex-add","vertex-update","vertex-remove"],()=>c.applySome(this._tooltip,e=>{e.info=this._getTooltipInfo()}))])};f.destroy=function(){c.destroyMaybe(this.segmentLabels);c.destroyMaybe(this._snappingOperation);this._tooltip=c.destroyMaybe(this._tooltip);this._editGeometryOperations=c.destroyMaybe(this._editGeometryOperations)};f.cancel=function(){this.complete({aborted:!0})};f.commitStagedVertex=function(){this._snappingOperation.abort();
if(c.isSome(this.stagedVertex)){const {stagedVertex:a}=this;this.stagedVertex=null;this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(a))}};f.complete=function(a){a=a&&a.aborted||!1;this._snappingOperation.abort();c.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();"segment"===this.geometryType||"point"===this.geometryType?this.commitStagedVertex():this.stagedVertex=null;this._createOperationCompleted=!("multipoint"===this.geometryType&&0===this.numVertices||
"polyline"===this.geometryType&&2>this.numVertices||"polygon"===this.geometryType&&3>this.numVertices);(this.isCompleted||a)&&this.emit("complete",{vertices:this.vertices.map((b,d)=>({componentIndex:0,vertexIndex:d,coordinates:b})),aborted:a,type:"complete"})};f.onInputEvent=function(a){switch(a.type){case "pointer-down":this._pointerDownStates.add(a.pointerId);break;case "pointer-up":this._pointerDownStates.delete(a.pointerId)}switch(a.type){case "pointer-move":return this._onPointerMove(a);case "hold":return this._onHold(a)}};
f.redo=function(){this._editGeometryOperations.redo()};f.undo=function(){c.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();this._editGeometryOperations.undo()};f._closeOnClickVertexIndex=function(a){const b=this._activeComponent;if("polygon"===this.geometryType&&2<b.vertices.length){if(this._vertexWithinPointerDistance(b.vertices[0].pos,a))return 0;if(this._vertexWithinPointerDistance(b.vertices[b.vertices.length-1].pos,a))return b.vertices.length-1}return null};f._createManipulatorDragPipeline=
function(a){switch(c.unwrap(this.drawingMode)){case "click":return this._createManipulatorDragPipelineClick(a);case "freehand":return this._createManipulatorDragPipelineFreehand(a);case "hybrid":return this._createManipulatorDragPipelineHybrid(a)}};f._createManipulatorDragPipelineClick=function(a){return v.createManipulatorDragEventPipeline(a,(b,d,h,p)=>{const m="touch"===p&&this._snappingEnabled;!this.isCompleted&&m&&(d.next(this._screenToMapDragEventStep()).next(e=>{"start"===e.action&&(this.stagedVertex=
e.mapStart,("segment"===this.geometryType||m&&0===this.numVertices)&&this.commitStagedVertex());return e}).next(this._snappingPipeline.createSnapDragEventPipelineStep({predicate:()=>m,cancel:h,snappingManager:this.snappingManager,snappingContext:new D.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:p,visualizer:this.snappingVisualizer}),updatingHandles:this.updatingHandles}),this._snappingPipeline.next).next(e=>{m&&(this.stagedVertex=e.mapEnd,
"end"===e.action&&this.commitStagedVertex());return e}).next(e=>{"end"!==e.action||"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete();return e}),h.next(()=>{m&&c.isSome(this.snappingManager)&&this.snappingManager.doneSnapping()}))})};f._createManipulatorDragPipelineFreehand=function(a){return v.createManipulatorDragEventPipeline(a,(b,d)=>{this.isCompleted||d.next(this._screenToMapDragEventStep()).next(h=>{"start"===h.action&&(c.isNone(this.stagedVertex)&&(this.stagedVertex=
h.mapStart),"segment"===this.geometryType&&this.commitStagedVertex());return h}).next(h=>{switch(h.action){case "start":case "update":this.stagedVertex=h.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":this.complete()}return h})})};f._createManipulatorDragPipelineHybrid=function(a){return v.createManipulatorDragEventPipeline(a,(b,d)=>{this.isCompleted||d.next(this._screenToMapDragEventStep()).next(h=>{"start"===h.action&&(c.isNone(this.stagedVertex)&&
(this.stagedVertex=h.mapStart),this.commitStagedVertex());return h}).next(h=>{switch(h.action){case "start":case "update":this.stagedVertex=h.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return h})})};f._getDrawSurface=function(){if(c.isNone(this.elevationDrawSurface))return this.drawSurface;if(!this.coordinateHelper.hasZ)return this.elevationDrawSurface.defaultZ=
null,this.elevationDrawSurface;let a=this.defaultZ,b=!1;c.isSome(this.elevationInfo)&&"absolute-height"===this.elevationInfo.mode&&(b=!0);c.isSome(this.snapToSceneEnabled)&&(b=this.snapToSceneEnabled);c.isSome(this.elevationInfo)&&"on-the-ground"===this.elevationInfo.mode&&(b=!1);const d=this._activeComponent.vertices.length;("segment"===this.geometryType||"polygon"===this.geometryType)&&0<d&&(a=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),b=!1);if(b)return this.drawSurface;this.elevationDrawSurface.defaultZ=
a;return this.elevationDrawSurface};f._mapToScreen=function(a){return this._getDrawSurface().mapToScreen(a)};f._onHold=function(a){this._snappingOperation.abort();"click"===this.drawingMode&&"touch"===a.pointerType&&this._snappingEnabled&&(this.stagedVertex=a.mapPoint);a.stopPropagation()};f._onImmediateClick=function(a){if(!("mouse"===a.pointerType&&2===a.button||this._manipulator.dragging)){var b=this._activeComponent,d=this._closeOnClickVertexIndex(a.screenPoint);if(c.isSome(d))a.stopPropagation(),
this.complete();else{d=this._screenToMap(a.screenPoint);if(c.isSome(d))switch(this.drawingMode){case "freehand":"point"===this.geometryType&&(c.isSome(this.stagedVertex)?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(d)),this.complete());break;case "click":case "hybrid":this._snappingOperation.abort(),c.isSome(this.stagedVertex)?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(d)),("point"===
this.geometryType||"segment"===this.geometryType&&2===b.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&1===b.vertices.length)&&this.complete()}a.stopPropagation()}}};f._onImmediateDoubleClick=function(a){this._manipulator.dragging||"point"===this.geometryType||(this.complete(),a.stopPropagation())};f._onPointerMove=function(a){var b=K.createScreenPoint(a.x,a.y);if(this._manipulator.dragging||this._pointerDownStates.has(a.pointerId)||this._manipulator.grabbing||!this._manipulator.interactive)this._snappingOperation.abort();
else{a.stopPropagation();var d=this._closeOnClickVertexIndex(b);c.isSome(d)?(this._closeOnVertex(d),this._snappingOperation.abort()):(b=this._screenToMap(b),this._manipulator.cursor=c.isSome(b)?"crosshair":null,c.isNone(b)?this._snappingOperation.abort():c.isNone(this.snappingManager)?(this.stagedVertex=b,this._snappingOperation.abort()):(d=this.snappingManager,a=new D.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:a.pointerType,visualizer:this.snappingVisualizer}),
this.updatingHandles.addPromise(J.ignoreAbortErrors(this._snappingOperation.snap(b,d,a)))))}};f._closeOnVertex=function(a){this.stagedVertex=null;a={componentIndex:0,vertexIndex:a,coordinates:this.coordinateHelper.vectorToArray(this._activeComponent.vertices[a].pos)};this.emit("cursor-update",{updated:null,vertices:[a],operation:"apply",type:"vertex-update"})};f._screenToMap=function(a){return this._getDrawSurface().screenToMap(a)};f._screenToMapDragEventStep=function(){let a=null;return b=>{"start"===
b.action&&(a=this._screenToMap(b.screenStart));if(c.isNone(a))return null;const d=this._screenToMap(b.screenEnd);return c.isSome(d)?{...b,mapStart:a,mapEnd:d}:null}};f._vertexWithinPointerDistance=function(a,b){const d=this._mapToScreen(this.coordinateHelper.vectorToDehydratedPoint(a));c.isSome(d)?(a=d.x-b.x,b=d.y-b.y,b=25>=a*a+b*b):b=!1;return b};f._calculateVertexTooltipElevation=function(a){const {tooltipOptions:b,view:d}=this;if(c.isNone(a)||"2d"===d.type)return this._defaultElevation;const h=
this.elevationInfo,p=b.elevation.mode;var {spatialReference:m}=a;m=L.getMetersPerVerticalUnitForSR(m);a=O.getConvertedElevation(d,a,h,{mode:p,offset:0});return r.createLength(a*m,"meters")};f._getTooltipInfo=function(){const {tooltipOptions:a,stagedOrLastVertex:b}=this;if(c.isNone(b))return null;this._tooltipContext.calculateElevation=h=>this._calculateVertexTooltipElevation(h);const d=this._elevationTooltipDetail(b);switch(this.geometryType){case "point":return new w.DrawPointTooltipInfo({tooltipOptions:a,
elevation:d});case "polyline":return this._tooltipContext.calculateTotalLength=E.computeLengthWithStagedVertex(this._editGeometryOperations.data.geometry,this.isDraped?"on-the-ground":"absolute-height"),new w.DrawPolylineTooltipInfo({tooltipOptions:a,elevation:d,totalLength:this._totalLengthTooltipDetail(b)});case "polygon":return this._tooltipContext.calculateArea=E.computeAreaWithStagedVertex(this._editGeometryOperations.data.geometry,this.isDraped),new w.DrawPolygonTooltipInfo({tooltipOptions:a,
elevation:d,area:this._areaTooltipDetail(b)});default:return null}};f._elevationTooltipDetail=function(a){return{mode:this.elevationInfo.mode,...c.unwrap(this._tooltipContext.calculateElevation)(a)}};f._totalLengthTooltipDetail=function(a){return{...c.unwrapOr(c.unwrap(this._tooltipContext.calculateTotalLength)(a),r.createLength(0,"meters"))}};f._areaTooltipDetail=function(a){return{...c.unwrapOr(c.unwrap(this._tooltipContext.calculateArea)(a),r.createArea(0,"square-meters"))}};f._updateTooltipInfo=
function(){var a=this._tooltip;if(!c.isNone(a)){var {stagedOrLastVertex:b}=this,d=this._elevationTooltipDetail(b);switch(this.geometryType){case "point":a.info.elevation=d;break;case "polyline":a=a.info;a.elevation=d;a.totalLength=this._totalLengthTooltipDetail(b);break;case "polygon":a=a.info,a.elevation=d,a.area=this._areaTooltipDetail(b)}}};y._createClass(t,[{key:"_snappingEnabled",get:function(){return c.isSome(this.snappingManager)&&this.snappingManager.options.effectiveEnabled}},{key:"_defaultElevation",
get:function(){return r.createLength(this.defaultZ,"meters")}},{key:"canRedo",get:function(){return this._editGeometryOperations.canRedo}},{key:"canUndo",get:function(){return this._editGeometryOperations.canUndo}},{key:"committedVertices",get:function(){return this._activeComponent.vertices.map(a=>this.coordinateHelper.vectorToArray(a.pos))}},{key:"drawingMode",set:function(a){this._set("drawingMode",null!=a?a:z.defaultDrawingMode)}},{key:"interactive",get:function(){return this._manipulator.interactive},
set:function(a){this._manipulator.interactive=a}},{key:"isCompleted",get:function(){return this._createOperationCompleted}},{key:"numCommittedVertices",get:function(){return this._activeComponent.vertices.length}},{key:"numVertices",get:function(){return c.isSome(this.stagedVertex)?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}},{key:"stagedVertex",get:function(){return this._snappingOperation.stagedPoint},set:function(a){this._snappingOperation.stagedPoint=I.clone(a)}},
{key:"updating",get:function(){return this.updatingHandles.updating}},{key:"vertices",get:function(){const a=this.committedVertices;c.isSome(this.stagedVertex)&&a.push(this.coordinateHelper.pointToArray(this.stagedVertex));return a}},{key:"stagedOrLastVertex",get:function(){if(c.isSome(this.stagedVertex))return this.stagedVertex;const a=this._activeComponent.getLastVertex();return c.isNone(a)?null:this._editGeometryOperations.data.coordinateHelper.vectorToDehydratedPoint(a.pos)}},{key:"test",get:function(){return{tooltip:this._tooltip}}}]);
return t}(G.EventedMixin(H.HandleOwner));k.__decorate([l.property()],g.DrawOperation.prototype,"_defaultElevation",null);k.__decorate([l.property()],g.DrawOperation.prototype,"defaultZ",void 0);k.__decorate([l.property()],g.DrawOperation.prototype,"isDraped",void 0);k.__decorate([l.property({value:z.defaultDrawingMode})],g.DrawOperation.prototype,"drawingMode",null);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"elevationDrawSurface",void 0);k.__decorate([l.property({constructOnly:!0})],
g.DrawOperation.prototype,"elevationInfo",void 0);k.__decorate([l.property({constructOnly:!0,type:B})],g.DrawOperation.prototype,"labelOptions",void 0);k.__decorate([l.property({constructOnly:!0,type:C})],g.DrawOperation.prototype,"tooltipOptions",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"geometryType",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"hasM",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,
"hasZ",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"manipulators",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"drawSurface",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"segmentLabels",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"snappingManager",void 0);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"snappingVisualizer",void 0);k.__decorate([l.property()],
g.DrawOperation.prototype,"snapToSceneEnabled",void 0);k.__decorate([l.property()],g.DrawOperation.prototype,"_snappingOperation",void 0);k.__decorate([l.property()],g.DrawOperation.prototype,"stagedVertex",null);k.__decorate([l.property()],g.DrawOperation.prototype,"updating",null);k.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"view",void 0);g.DrawOperation=k.__decorate([M.subclass("esri.views.draw.DrawOperation")],g.DrawOperation);Object.defineProperties(g,{__esModule:{value:!0},
[Symbol.toStringTag]:{value:"Module"}})});